# === Dataset Download & Preparation ===
import os
from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

# Kaggle API key path
os.environ['KAGGLE_CONFIG_DIR'] = "/content/drive/MyDrive/Colab Notebooks/dosya"

# Change working directory to project folder
%cd /content/drive/MyDrive/Colab Notebooks/dosya

# Download dataset from Kaggle
!kaggle datasets download -d paultimothymooney/breast-histopathology-images

# Unzip and remove zip file
!unzip \*.zip && rm *.zip

# cnn_model2.py
# CNN model with 75x75 resized images and categorical output using softmax

import numpy as np
import random
import cv2
import glob
import matplotlib.pyplot as plt
import seaborn as sns
import warnings

from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report
from keras.utils.np_utils import to_categorical
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense
from keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.optimizers import Adam

# Suppress warnings
warnings.filterwarnings("ignore")

# Set seed for reproducibility
random.seed(41)
np.random.seed(41)

# Load image file paths
image_paths = glob.glob('/content/drive/MyDrive/Colab Notebooks/dosya/**/*.png', recursive=True)

# Separate classes based on filename
class0 = [f for f in image_paths if f.endswith("class0.png")]
class1 = [f for f in image_paths if not f.endswith("class0.png")]

# Sample equal number of images
sampled_class0 = random.sample(class0, 5000)
sampled_class1 = random.sample(class1, 5000)

img_size = 75

# Function to load and resize images
def get_image_arrays(data, label):
    img_arrays = []
    for path in data:
        img = cv2.imread(path, cv2.IMREAD_COLOR)
        img = cv2.resize(img, (img_size, img_size))
        img_arrays.append([img, label])
    return img_arrays

# Get image arrays for both classes
class0_array = get_image_arrays(sampled_class0, 0)
class1_array = get_image_arrays(sampled_class1, 1)

# Combine and shuffle dataset
combined_data = class0_array + class1_array
random.shuffle(combined_data)
X, y = zip(*combined_data)

X = np.array(X).reshape(-1, img_size, img_size, 3)
y = to_categorical(np.array(y), num_classes=2)

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

# CNN Model
model = Sequential([
    Conv2D(32, (3, 3), padding='same', activation='relu', input_shape=(img_size, img_size, 3)),
    MaxPooling2D(2, 2),
    Dropout(0.25),

    Conv2D(64, (3, 3), padding='same', activation='relu'),
    MaxPooling2D(2, 2),
    Dropout(0.25),

    Conv2D(128, (3, 3), padding='same', activation='relu'),
    MaxPooling2D(2, 2),
    Dropout(0.25),

    Conv2D(128, (3, 3), padding='same', activation='relu'),
    MaxPooling2D(2, 2),
    Dropout(0.25),

    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(2, activation='softmax')  # Multi-class output
])

# Compile model
model.compile(optimizer=Adam(learning_rate=0.001), loss='categorical_crossentropy', metrics=['accuracy'])

# Data augmentation (optional but useful)
datagen = ImageDataGenerator(
    rotation_range=10,
    zoom_range=0.1,
    width_shift_range=0.1,
    height_shift_range=0.1,
    horizontal_flip=True
)
datagen.fit(X_train)

# Train the model
history = model.fit(datagen.flow(X_train, y_train, batch_size=250),
                    validation_data=(X_test, y_test),
                    epochs=30)

# Evaluate the model
Y_pred = model.predict(X_test)
Y_pred_classes = np.argmax(Y_pred, axis=1)
Y_true = np.argmax(y_test, axis=1)

# Confusion matrix
conf_matrix = confusion_matrix(Y_true, Y_pred_classes)
plt.figure(figsize=(8, 8))
sns.heatmap(conf_matrix, annot=True, fmt=".1f", cmap="Greens")
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("True")
plt.show()

# Classification report
print(classification_report(Y_true, Y_pred_classes))

# Accuracy plot
plt.plot(history.history['accuracy'], label='Train Acc')
plt.plot(history.history['val_accuracy'], label='Val Acc')
plt.title("Model Accuracy")
plt.xlabel("Epoch")
plt.ylabel("Accuracy")
plt.legend()
plt.grid(True)
plt.show()
